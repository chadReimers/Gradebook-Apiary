FORMAT: 1A

# ID&G Gradebook API Draft
Terms used match the ID&G Course and Content Terms. See https://docs.google.com/a/pearson.com/document/d/1yvgHo541eCUfaT6SfvqCLUy9bDQEirJCakyZskjSmlY

These contracts are specific to REST services, but the body and header data is independent of the particular transport mechanism.

All resources are returned in JSON+HAL format, which allows navigating between resources using the links present in the _links property of all responses. For collections of resources, the resource lists are returned as children of the _embedded property. Each resource contained in those lists will have its own _links property for navigation.

## General Headers
- `X-Authorization` Required header containing a valid PI Authentication token. A vaid token and the specific user identified in the token are used for various levels of Authorization.
- `Correlation-Id` Strongly recommended header. Included in all responses. Correlation-Id is documented here as a UUID, but it may be any string. Gradebook will accept a string on incoming API calls. When required to generate a Correlation-Id, Gradebook will always create a new UUID as the Correlation-Id value. For further detials, see https://neo.pearson.com/groups/api-practice-area/blog/2015/04/15/additional-correlation-id-requirements-api-practice-recap-for-2015-04-09


## Not Found Error [/grid/error/notfound]
+ Model (application/json)
    + Headers
    
            Correlation-Id: UUID // same as request, if supplied. Otherwise the UUID generated by the service

    + Body
    
            {
                "errorId": “1ef87b10-887c-11e3-baa7-0800200c9a66”,
                "message": "Entity not found.", // Message is human readable, not intended to be machine parsed.
                "httpStatus": 404
            }
            
## Authorization Failed Error [/grid/error/authfail]
+ Model (application/json)
    + Headers
    
            Correlation-ID: UUID // same as request, if supplied. Otherwise the UUID generated by the service

    + Body
        
            {
                "errorId": “1ef87b10-887c-11e3-baa7-0800200c9a66”,
                "message": "User not authorized for this operation.", // Message is human readable, not intended to be machine parsed.
                "httpStatus": 403
            }
            
## Authentication Required Error [/grid/error/noauth]
+ Model (application/json)
    + Headers
    
            Correlation-ID: UUID // same as request, if supplied. Otherwise the UUID generated by the service

    + Body
        
            {
                "errorId": “1ef87b10-887c-11e3-baa7-0800200c9a66”,
                "message": "Valid token required in X-Authorization header.", // Message is human readable, not intended to be machine parsed.
                "httpStatus": 401
            }
            
## Bad Request Error [/grid/error/badreq]
+ Model (application/json)
    + Headers
    
            Correlation-ID: UUID // same as request, if supplied. Otherwise the UUID generated by the service

    + Body
        
            {
                "errorId": “1ef87b10-887c-11e3-baa7-0800200c9a66”,
                "message": "The request failed because [reasons]", // Message is human readable, not intended to be machine parsed.
                "httpStatus": 400
            }

## Assignment Attempt [/grid/assignment/attempt]
+ Model (application/hal+json)
    + Headers
    
            Correlation-Id: UUID // value of the incoming request, or generated for the request if none provided

    + Body
    
            {
                "id": 3, // int, number of this attempt at the assignment as reported by IRR and/or Scorring Engine. If an attempt is manaully modified, that modified attempt is recoreded in the gradebook with the same attempt number. Attempt numbers are not guaranteed unique for a student and assignment.
                "assignmentId": "String", 
                "userId": "String", 
                "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                "omit": boolean, // leave out of any calculations/aggregations, regardless of other rules, attempt 
                "state": "Enum: Not Started|In Progress|Complete|Complete Late|Complete Override",
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                },
                "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                "ext":
                    [{"extType":"type name of origin, eg. writingAssignment",
                         "data":{JSON}
                    }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
            }


## Assignment Attempt Response [/grid/response/assignment/attempt]
+ Model (application/hal+json)
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attemptId}" }
                }
                "id": 3, // int, number of this attempt at the assignment as reported by IRR and/or Scoring Engine. If an attempt is manaully modified, that modified attempt is recoreded in the gradebook with the same attempt number. Attempt numbers are not guaranteed unique for a student and assignment. 
                "assignmentId": "String", 
                "userId": "String",
                "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                "omit": boolean, // leave out of any calculations/aggregations, regardless of other rules, attempt 
                "state": "Enum: Not Started|In Progress|Complete|Complete Late|Complete Override",
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                },
                "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                "ext":
                    [{"extType":"type name of origin, eg. writingAssignment",
                         "data":{JSON}
                    }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
            }

## Assignment Grade [/grid/assignment/grade]
+ Model (application/hal+json)
   + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "attemptId": 3,
                "assignmentId": "String", 
                "userId": "String",
                "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                "omit": boolean, // leave out of any calculations/aggregations, regardless of other rules, attempt 
                "state": "Enum: Not Started|In Progress|Complete|Complete Late|Complete Override",
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                },
                "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                "ext":
                    [{"extType":"type name of origin, eg. writingAssignment",
                         "data":{JSON}
                    }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
            }

## Assignment Grade Response [/grid/response/assignment/grade]
+ Model (application/hal+json)
   + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade" }
                }
                "attemptId": 3,
                "assignmentId": "String", 
                "userId": "String",
                "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                "omit": boolean, // leave out of any calculations/aggregations, regardless of other rules, attempt 
                "state": "Enum: Not Started|In Progress|Complete|Complete Late|Complete Override",
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                },
                "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                "ext":
                    [{"extType":"type name of origin, eg. writingAssignment",
                         "data":{JSON}
                    }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
            }

# Group Gradebook Services
Services used externally to interact with gradebook data. Grades are *not* identified by individual ids, rather by the user, the course section (`sourceId` & `learningContextId`), the assignment or a combinaton of those.


Note that Gradebook is only concerned about Assignments that are gradeable, either automatically or manually.

Assignments are defined as: 
    
    Content or activities the instructor selects to include in the prescribed set of materials for the course section.
    Examples: 
    * REVEL reading module
    * Quiz
    * Video
    * Writing Space activity (e.g. an essay with multiple drafts)
    

Common Parameters

- `sourceId` (String) - Identifies the source of the `learningContextId` (together they define the context of all gradebook related resources, ex. course section).
- `learningContextId` (String) - Identifies the specific learning item (e.g. course section) in the given `sourceId`. `sourceId` and `learningContextId` must both be provided.
- `userId` (String) - Identifies the user that earned the item score or grade or attempt.
- `assignmentId` (String) - Identifies the specific assignment. AssignmentId is **not** unique across course sections, it **must** be in conjuction with `sourceId` and `learningContextId` to be meaningful.

Common Elements

        "changed": { 
            "cause": "enum", // reason for changing the grade
            "description": "String, Some free-form elaboration of the change cause.",
            "date": "ISO 8601 date & time, UTC zone", // when the change was made
            "by": {"id": "string identifying system or ID of user"}
        }
        
Any element that can be overridden includes the changed element to provide detailed meta-data about when and why the value(s) were overridden.

## Group Gradebook
The collection of routes providing the gradebook perspective on various entities. These routes provide access to all of the calculated values related to the particular view of the gradebook.
For example: from a user level, calculations such as the class average ("above" the user) and the user's grade to date, and any other calculated values at the level of the user.

## Users [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{?filter}]

The Gradebook view of users in a course provides grade calculation information at the course and collection of embedded users with grades. 

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users{?filter} [GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + filter (optional, string, `PROPOSED OPTION - not guaranteed  ?filter=userId::6136a21e-f04f-469a-9866-edfcfd5acf5d|userId:::c7cbba1e-f235-4e2a-8bf6-03dcc5726ef7|etc|userId::d88a6ce5-e2d5-4768-94e3-48790cf0231a`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token
            accept: application/hal+json

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users" }
                },
                "classAvgGrade": 99.5,
                "_embedded": {
                    "users": [{
                        "_links": {
                            "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}" },
                            "user": { "href" : "https://[domain]/registrar/sectionassociations/{id}/user/{userId}" // this path is not correct, for illustration only }
                        },
                        "id": "String",
                        "gradeToDate": 27.125,
                        "changed": { 
                            "cause": "enum", // reason for changing the grade
                            "description": "String, Some free-form elaboration of the change cause.",
                            "date": "ISO 8601 date & time, UTC zone", // when the change was made
                            "by": {"id": "string identifying system or UUID of user"}
                        }
                    }]
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## Single User [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}]

The Gradebook view of a single user provides grade calculation information for the user in the course. Note that the PUT route is for updating only 1 value. Changes to any other calculated values will be ignored.

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{Id} [GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + userId (required, string, `c12ea628-8afd-412f-885b-278be55f0dc8`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}" },
                    "user": { "href" : "https://[domain]/registrar/sectionassociations/{id}/user/{userId}" // this path is not correct, for illustration only }
                },
                "id": "String",
                "gradeToDate": 27.125,
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]


### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}[PUT]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + userId (optional, string )
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token
            content-type: "application/json"

    + Body
    
            {
                "id": "String",
                "gradeToDate": 27.125,
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                }
            }

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}" },
                    "user": { "href" : "https://[domain]/registrar/sectionassociations/{id}/user/{userId}" // this path is not correct, for illustration only }
                },
                "id": "String",
                "gradeToDate": 27.125,
                "changed": { 
                    "cause": "enum", // reason for changing the grade
                    "description": "String, Some free-form elaboration of the change cause.",
                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                    "by": {"id": "string identifying system or UUID of user"}
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## Assignments [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/]

The gradebook view of multiple Assignments provides calculations at a course and assignment level. It is read-only.

** PROPOSED OPTION - not guaranteed!** It can be filtered with multiple assignmentIds to provide a smaller collection of assignments than would be returned as all assignments for the sourceId and learningContextId (no Id provided) but more than 1.

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/[GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/" }
                },
                "classAvgGrade": 99.5,
                "_embedded" : {
                    "assignments": [{
                        "_links": {
                            "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/{assignmentId}" },
                            "assignment": { "href" : "https://[domain]/scopeNSequence/assignment/{assignmentId}" // this path is not correct, for illustration only }
                        },
                        "id": "String",
                        "avgGrade": 77.67, // additional assignment-level values may be added
                        "categoryId": "12345"
                    }]
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## Single Assignment [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/{assignmentId}]

The gradebook view of an Assignment provides calculations at an assignment level. It is read-only.

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/[GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + assignmentId (required, string, `d88a6ce5-e2d5-4768-94e3-48790cf0231a`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/assignments/{assignmentId}" },
                    "assignment": { "href" : "https://[domain]/scopeNSequence/assignment/{assignmentId}" // this path is not correct, for illustration only }
                },
                "id": "String",
                "avgGrade": 77.67, // additional assignment-level values may be added
                "categoryId": "12345"
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## User Assignments [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{?expand}{&filter}]

The gradebook view of assignments for a user, containing course-level, user-level, and assignment-level calculations.

The assignment grade can also be expanded to provide full grade details for each assignment. The example below showcases this option.

** PROPOSED OPTION - not guaranteed!** It can be filtered with multiple assignmentIds to provide a smaller collection of assignments than would be returned as all assignments for the user (no Id provided) but more than 1.

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{?expand}{&filter}[GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + userId (required, String, `879aba3a-d596-4ec6-bd50-fa37453cecfc`)
    + expand (optional, string, `?expand=assignments.grade`)
    + filter (optional, string, `PROPOSED OPTION - not guaranteed  ?filter=assignmentId::6136a21e-f04f-469a-9866-edfcfd5acf5d|assignmentId:::c7cbba1e-f235-4e2a-8bf6-03dcc5726ef7|etc|assignmentId::d88a6ce5-e2d5-4768-94e3-48790cf0231a`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/" }
                },
                "classAvgGrade": 99.5,
                "gradeToDate": 88.125,
                "_embedded" : {
                    "assignments": [{
                        "_links": {
                            "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}" },
                            "assignment": { "href" : "https://[domain]/scopeNSequence/assignment/{assignmentId}" // this path is not correct, for illustration only }
                        },
                        "id": "String",
                        "avgGrade": 77.67, // additional assignment-level values may be added
                        "categoryId": "12345",
                        "userId": "String",
                        "_embedded":{
                            "grade": {
                                "_links": { 
                                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade" },
                                    "gradedAttempt": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attempt.id}" }
                                },
                                "assignmentId": "String",
                                "userId": "String",
                                "numberOfAttempts": 3, // int, number of attempts on the assignment as reported by Scorring Engines. If an attempt is manaully modified, that modified attempt is recoreded in the gradebook with the same attempt number. Attempt numbers are not guaranteed unique for a student and assignment.
                                "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                                "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                                "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                                "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                                "omit": boolean, // leave out of any calculations/aggregations, regardless of other rules, attempt 
                                "state": "enum: Not Started|In Progress|Complete",
                                "changed": { 
                                    "cause": "enum", // reason for changing the grade
                                    "description": "String, Some free-form elaboration of the change cause.",
                                    "date": "ISO 8601 date & time, UTC zone", // when the change was made
                                    "by": {"id": "string identifying system or UUID of user"}
                                },
                                "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                                "ext": [{
                                    "extType":"type name of origin, eg. writingAssignment",
                                    "data":{JSON}
                                }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
                            }
                        }
                    }]
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## User Assignment [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}{?expand}]

The gradebook view of assignments for a user, containing course-level, user-level, and assignment-level calculations.

The assignment grade can also be expanded to provide full grade details for each assignment. The example below showcases this option.

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}{?expand}[GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + userId (required, string, `879aba3a-d596-4ec6-bd50-fa37453cecfc`)
    + assignmentId (optional, string, `6136a21e-f04f-469a-9866-edfcfd5acf5d`)
    + expand (optional, string, `?expand=grade`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}" },
                    "assignment": { "href" : "https://[domain]/scopeNSequence/assignment/{assignmentId}" // this path is not correct, for illustration only },
                    "grade": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade" }
                },
                "id": "String",
                "avgGrade": 77.67, // additional assignment-level values may be added
                "categoryId": "12345",
                "userId": "String",
                "_embedded":{
                    "grade": {
                        "_links": { 
                            "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade" },
                            "gradedAttempt": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attempt.id}" }
                        },
                        "assignmentId": "String",
                        "userId": "String",
                        "numberOfAttempts": 3, // int, number of attempts on the assignment as reported by Scorring Engines. If an attempt is manaully modified, that modified attempt is recoreded in the gradebook with the same attempt number. Attempt numbers are not guaranteed unique for a student and assignment.
                        "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                        "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                        "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                        "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                        "omit": boolean, // leave out of any calculations/aggregations, regardless of other rules, attempt 
                        "state": "enum: Not Started|In Progress|Complete",
                        "changed": { 
                            "cause": "enum", // reason for changing the grade
                            "description": "String, Some free-form elaboration of the change cause.",
                            "date": "ISO 8601 date & time, UTC zone", // when the change was made
                            "by": {"id": "string identifying system or UUID of user"}
                        },
                        "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                        "ext": [{
                            "extType":"type name of origin, eg. writingAssignment",
                            "data":{JSON}
                        }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
                    }
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## User Categories [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/categories{?expand}]

The gradebook view of users & categories provides a per-category breakdown of a user's grade by category. It is read-only.

Proposed, NOT SUPPORTED IN MVP: A two depth expantion on assignment and grade is possible to provide full assignment and grade details. The example below showcases this option.

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/categories/{?expand}[GET]
+ Parameters
    + sourceId (required, string, `revel`)
    + learningContextId (required, string, `12345A`)
    + userId (required, string, `879aba3a-d596-4ec6-bd50-fa37453cecfc`)
    + expand (optional, string, `expand=categories.assignments.grade provides grade information for each assignment in the category for the user`)
    
+ Request
    + Headers
    
            Correlation-Id: UUID
            X-Authorization: PI Auth Token

+ Response 200
    + Headers
    
            Correlation-Id: UUID // matches request, or generated if not provided on request
            content-type: application/hal+json
            Access-Control-Allow-Origin: *

    + Body
    
            {
                "_links": {
                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/categories" }
                },
                "classAvgGrade": 99.5,
                "_embedded": {
                    "catgegories": [{
                        "_links": {
                            "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/categories" },
                            "category": { "href" : "https://[domain]/scopeNSequence/category/{categoryId}", // this path is not correct, for illustration only },
                            "assignments": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments" }
                        },
                        "id": "String",
                        "weight": 25.0,
                        "percentAdjusted": 72, // raw grade for all assignments in category before any weighting is applied
                        "weightedPercentAdjusted": 18,
                        "_embedded": { // this embedded layer down NOT SUPPORTED IN MVP
                            "assignments": [{
                                "_links": {
                                    "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}" },
                                    "assignment": "https://[domain]/scopeNSequence/assignment/{assignmentId}" // this path is not correct, for illustration only,
                                    "grade": "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade"
                                },
                                "id": "String",
                                "avgGrade": 77.67, // additional assignment-level values may be added
                                "categoryId": "12345",
                                "userId": "String",
                                "_embedded": {
                                    "grades": [{
                                        "_links": { 
                                            "self": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade" },
                                            "assignment": { "href" : "https://[domain]/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/" }
                                        },
                                        "assignmentId": "String",
                                        "userId": "String",
                                        // further elements only if expanded
                                        "attemptNumber": 3, // int, number of this attempt at the assignment as reported by IRR and/or Scorring Engine. If an attempt is manaully modified, that modified attempt is recoreded in the gradebook with the same attempt number. Attempt numbers are not guaranteed unique for a student and assignment.
                                        "pointsEarned": 19.5, // double, raw number of points earned (correct) on the assignment, independent of any adjustments, penalties, etc. by the scorring engine.
                                        "extraCreditPointsEarned": 10.0, // double, not yet supported (known future requirement)
                                        "pointsAdjusted": 17.5, // double, number of points on the assignment, after any adjustment by the scorring engine OR manual intervention to set the points (and by extension the grade).
                                        "percentAdjusted": 85, // double, the attempt expressed as a percentage of assignment points possible (attempt.pointsAdjusted / assignment.pointsPossible ) * 100
                                        "omit": "boolean", // leave out of any calculations/aggregations, regardless of other rules, attempt 
                                        "state": "Enum: Not Started|In Progress|Complete",
                                        "changed": { 
                                            "cause": "enum", // reason for changing the grade
                                            "description": "String, Some free-form elaboration of the change cause.",
                                            "date": "ISO 8601 date & time, UTC zone", // when the change was made
                                            "by": {"id": "string identifying system or UUID of user"}
                                        },
                                        "lastModified": "ISO 8601 date & time, UTC zone", // when the student earned the grade, critical for ordering attempts, including manual adjustment of an attempt
                                        "ext": [{
                                            "extType":"type name of origin, eg. writingAssignment",
                                            "data":{JSON}
                                        }] // additional infomration about the assignment, that may be needed in display, but is not (yet) a first class entity for all grades in the gradebook.
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

## Group Assignment Attempt

Assignment Attempts are a record of the grade for every attempt by a student at an assignment. 
The Gradebook determins which attempt, if any, becomes the official grade for the student on the assignment.

## Assignment Attempts [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attemptNumber}]

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attemptNumber}[GET]
Retrieve a specific attempt or all the attempts by a user on an assignment.  
+ Parameters
    + userId (required, String)
    + assignmentId (required, String)
    + sourceId (required, String)
    + learningContextId (required, String)
    + attemptNumber (optional, int)

+ Request
    + Headers
    
            Correlation-Id: UUID, strongly recommended
            X-Authorization: PI Auth Token, required
    + Body
    
            None

+ Response 200
    [Assignment Attempt Response][]

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attemptNumber} [PUT]
Add or modify an attempt by a user on an assignment to the gradebook.  
+ Parameters
    + userId (required, String) 
    + assignmentId (required, String)
    + sourceId (required, String)
    + learningContextId (required, String)
    + attemptNumber (required, int)

+ Request
    [Assignment Attempt][]

+ Response 200
    [Assignment Attempt Response][]

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]


### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/attempts/{attemptNumber}[DELETE]
Remove a specifc attempt at the assignment by the user. If the intent is simply to discard the attempt from consideration as a Grade, the `omitAttempt` value should be set to `true` instead.

+ Parameters
    + userId (required, String) 
    + assignmentId (required, String)
    + sourceId (required, String)
    + learningContextId (required, String)
    + attemptNumber (required, int)

+ Request
    + Headers
    
            Correlation-Id: UUID // value of the incoming request, or generated for the request if none provided
            X-Authorization: PI Auth Token, required 
        
+ Response 204

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]

## Group Assignment Grade

## Assignment Grade [/gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade]
Grade is the official grade for the student on the assignment, either as determined by the gradebook rules from the attempts or explicitly set by a user.
            
### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade [GET]
Retrieve the current official grade for a user in an assignment
+ Parameters
    + userId (required, String) 
    + assignmentId (required, String) 
    + sourceId (required, String)
    + learningContextId (required, String)

+ Request
    + Headers
    
            X-Authorization: PI Auth Token, required
            Correlation-ID: UUID, strongly recommended

+ Response 200
    [Assignment Grade Response][]
+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]
+ Response 404
    [Not Found Error][]

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade [PUT]
Set the grade for an assignment. Normally this will be handled internally by the gradebook. When called the changed element **must** be populated.
+ Parameters
    + userId (required, String )
    + assignmentId (required, String )
    + sourceId (required, String)
    + learningContextId (required, String)
    
+ Request
    [Assignment Grade][]

+ Response 200
    [Assignment Grade Response][]
+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]

### /gradebook/source/{sourceId}/learningcontext/{learningContextId}/users/{userId}/assignments/{assignmentId}/grade [DELETE]
Remove the grade for the student on the assignment from the gradebook. The Attempts will remain, and the grade may be re-created. 
+ Parameters
    + userId (required, String )
    + assignmentId (required, String )
    + sourceId (required, String)
    + learningContextId (required, String)

+ Request
    + Headers
    
            X-Authorization: PI Auth Token, required
    
+ Response 204

+ Response 400
    [Bad Request Error][]
+ Response 401
    [Authentication Required Error][]
+ Response 403
    [Authorization Failed Error][]

## Group Gradebook API Health

Resource to provide information on the status of the application

## Health check [/health]
### /health [GET]
+ Request
    + Headers
    
            Correlation-Id: UUID, strongly suggested
    
+ Response 200
    + Headers

            Correlation-Id: UUID
        
    + Body
    
            {
                "_links": {
                    "self": { "href": "https://{mydomain}/health" },
                },
                "name":"Gradebook API",
                "version":"0.2.10",
                "dependencies": [{
                    "name":"name of depdency",
                    "status": "enum", //healthy, degraded, failing
                    "data":{JSON}
                }]
            }

+ Response 503
    + Headers
    
            Correlation-Id: UUID

    + Body
    
            {
                "_links": {
                    "self": { "href": "https://{mydomain}/health" },
                },
                "errorMsg": "The application cannot process requests. See the dependency health for possible additional infomration."
                "name":"Discussions API",
                "version":"0.2.10",
                "dependencies": [{
                    "name":"name of depdency",
                    "status": "enum", //healthy, degraded, failing
                    "data":{JSON}
                }]
                
